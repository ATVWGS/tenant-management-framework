trigger:
  branches:
    include:
      - main
      - prepare-release/*
  paths:
    include:
      - TMF

variables:
  major: 1
  minor: 3
  patch: $(Build.BuildID)
  moduleName: 'TMF'
  releaseFeed: 'vwgs-azdevops-release'
  buildVer: $(major).$(minor).$(Build.BuildID)
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
    prerelease: preview
    nugetVer: $(buildVer)-$(prerelease)
    zipVer: $(buildVer)-$(prerelease)
  ${{ else }}:
    nugetVer: $(buildVer)
    zipVer: $(buildVer)

name: Build TMF $(major).$(minor).$(Build.BuildID) $(prerelease)

pool:
  vmImage: "ubuntu-latest"

stages:
- stage: build
  jobs:
  - job: build
    steps:
    - task: PowerShell@2
      displayName: Updating module manifest
      inputs:
        filePath: 'build/build.ps1'
        arguments: '-ModuleName $(moduleName) -BuildVersion $(buildVer) -LicenseUri $(licenseUri) -ProjectUri $(projectUri) -Tags $(tags) -Prerelease $(prerelease)'
    - task: CopyFiles@2
      displayName: Adding LICENSE to module
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'LICENSE'
        TargetFolder: '$(System.DefaultWorkingDirectory)/$(moduleName)'
    - task: ArchiveFiles@2
      displayName: Archiving module directory
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(moduleName)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/zip/$(moduleName).$(zipVer).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/zip'
        ArtifactName: 'zip'
        publishLocation: 'Container'
    - task: NuGetCommand@2
      displayName: Building NuGet package
      inputs:
        command: 'pack'
        packagesToPack: '$(System.DefaultWorkingDirectory)/$(moduleName)/$(moduleName).nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: nugetVer
        buildProperties: 'VERSIONHERE=$(nugetVer)'
        packDestination: '$(Build.ArtifactStagingDirectory)/nuget'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
        ArtifactName: 'nuget'
        publishLocation: 'Container'
- stage: run_tests
  jobs:
  - job: pester
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'zip'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: PowerShell@2
        continueOnError: true
        inputs:         
          filePath: 'tests/test.ps1'
          arguments: '-ModuleName $(moduleName) -ArtifactPath $(Pipeline.Workspace) -OutPath $(Pipeline.Workspace)'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: '**/Test-Pester.XML'
          searchFolder: '$(Pipeline.Workspace)'
          failTaskOnFailedTests: true
- stage: publish_gallery
  jobs:
  - job: publish
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'zip'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: PowerShell@2
        displayName: Publishing module to Powershell Gallery
        inputs:
          filePath: 'build/publish.ps1'
          arguments: '-ModuleName $(moduleName) -ArtifactPath $(Pipeline.Workspace) -ApiKey $(apiKey)'
- stage: publish_internal_feed
  jobs:
  - job: publish
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'nuget'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: NuGetCommand@2
        displayName: Publishing module to internal NuGet feed
        inputs:
          command: 'push'
          packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'Azure Team VWGS/vwgs-azdevops-release'
          allowPackageConflicts: true