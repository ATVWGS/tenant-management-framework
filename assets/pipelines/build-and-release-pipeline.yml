trigger:
  branches:
    include:
      - main
      - prepare-release/*
  paths:
    include:
      - TMF

variables:
  major: 1
  minor: 8
  patch: $(Build.BuildID)
  moduleName: 'TMF'
  buildVer: $(major).$(minor).$(Build.BuildID)
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
    prerelease: preview
    nugetVer: $(buildVer)-$(prerelease)
    zipVer: $(buildVer)-$(prerelease)
    gitTag: v$(buildVer)-$(prerelease)
  ${{ else }}:
    nugetVer: $(buildVer)
    zipVer: $(buildVer)
    gitTag: v$(buildVer)

name: Build TMF $(major).$(minor).$(Build.BuildID) ${{ variables.prerelease }}

pool:
  vmImage: "windows-latest"

stages:
- stage: prepare_environment
  jobs:
  - job: install_dependencies
    steps:
    - task: Cache@2
      displayName: Restore required Powershell modules
      inputs:
        key: powershell-modules3
        path: C:\Users\VssAdministrator\Documents\WindowsPowerShell\Modules
        cacheHitVar: MODULES_RESTORED
    - task: PowerShell@2
      displayName: Run install-dependencies.ps1
      inputs:      
        filePath: 'build/install-dependencies.ps1'
        arguments: '-SystemAccessToken $(System.AccessToken) -FeedName $(feedName) -FeedUrl $(feedUrl) -UsePrivatePackageFeed'
      condition: ne(variables.MODULES_RESTORED, 'true')
- stage: build
  jobs:
  - job: build
    steps:
    - task: Cache@2
      displayName: Restore required Powershell modules
      inputs:
        key: powershell-modules3
        path: C:\Users\VssAdministrator\Documents\WindowsPowerShell\Modules
        cacheHitVar: MODULES_RESTORED
    - task: PowerShell@2
      displayName: Updating module manifest
      inputs:
        filePath: 'build/build.ps1'
        ${{ if ne(variables['prerelease'], '') }}:
          arguments: '-ModuleName $(moduleName) -BuildVersion $(buildVer) -LicenseUri $(licenseUri) -ProjectUri $(projectUri) -Tags $(tags) -Prerelease $(prerelease)'
        ${{ else }}:
          arguments: '-ModuleName $(moduleName) -BuildVersion $(buildVer) -LicenseUri $(licenseUri) -ProjectUri $(projectUri) -Tags $(tags)'
    - task: CopyFiles@2
      displayName: Adding LICENSE to module
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'LICENSE'
        TargetFolder: '$(System.DefaultWorkingDirectory)/$(moduleName)'
    - task: ArchiveFiles@2
      displayName: Archiving module directory
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(moduleName)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/zip/$(moduleName).$(zipVer).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/zip'
        ArtifactName: 'zip'
        publishLocation: 'Container'
    - task: NuGetCommand@2
      displayName: Building NuGet package
      inputs:
        command: 'pack'
        packagesToPack: '$(System.DefaultWorkingDirectory)/$(moduleName)/$(moduleName).nuspec'
        versioningScheme: byEnvVar
        versionEnvVar: nugetVer
        buildProperties: 'VERSIONHERE=$(nugetVer)'
        packDestination: '$(Build.ArtifactStagingDirectory)/nuget'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
        ArtifactName: 'nuget'
        publishLocation: 'Container'
- stage: run_tests
  jobs:
  - job: general_tests
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'zip'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: Cache@2
        displayName: Restore required Powershell modules
        inputs:
          key: powershell-modules3
          path: C:\Users\VssAdministrator\Documents\WindowsPowerShell\Modules
          cacheHitVar: MODULES_RESTORED
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            New-Item -Path "$(Pipeline.Workspace)\tests\results" -ItemType Directory -Force
      - task: PowerShell@2
        displayName: Invoke Pester tests
        continueOnError: true
        inputs:         
          filePath: 'tests/test.ps1'
          arguments: '-SkipDependencyDownload -ArtifactPath $(Pipeline.Workspace) -OutPath "$(Pipeline.Workspace)/tests/results" -TestsToRun "General"'
          workingDirectory: 'tests/'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: '**/*.xml'
          searchFolder: '$(Pipeline.Workspace)/tests/results'
          failTaskOnFailedTests: true
  - job: module_specific_tests
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'zip'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: Cache@2
        displayName: Restore required Powershell modules
        inputs:
          key: powershell-modules3
          path: C:\Program Files\WindowsPowerShell\Modules\
          cacheHitVar: MODULES_RESTORED
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            New-Item -Path "$(Pipeline.Workspace)\tests\results" -ItemType Directory -Force
      - task: PowerShell@2
        displayName: Invoke Pester tests
        continueOnError: true
        inputs:         
          filePath: 'tests/test.ps1'
          arguments: '-SkipDependencyDownload -ArtifactPath $(Pipeline.Workspace) -OutPath "$(Pipeline.Workspace)/tests/results" -TenantId $(testsTenantId) -TenantClientSecret $(testsClientSecret) -TenantClientId $(testsClientId) -TestsToRun "Module"'
          workingDirectory: 'tests/'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: '**/*.xml'
          searchFolder: '$(Pipeline.Workspace)/tests/results'
          failTaskOnFailedTests: true
- stage: publish_gallery
  jobs:
  - job: publish
    steps:
      - task: Cache@2
        displayName: Restore required Powershell modules
        inputs:
          key: powershell-modules3
          path: C:\Program Files\WindowsPowerShell\Modules\
          cacheHitVar: MODULES_RESTORED
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'zip'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: PowerShell@2
        displayName: Publishing module to Powershell Gallery
        inputs:
          filePath: 'build/publish.ps1'
          arguments: '-ModuleName $(moduleName) -ArtifactPath $(Pipeline.Workspace) -ApiKey $(apiKey)'
- stage: publish_internal_feed
  jobs:
  - job: publish
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'nuget'
          itemPattern: '**'
          targetPath: '$(Pipeline.Workspace)'
      - task: NuGetCommand@2
        displayName: Publishing module to internal NuGet feed
        inputs:
          command: 'push'
          packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '$(publishFeed)'
          allowPackageConflicts: true
- stage: finish_pipeline
  jobs:
  - job: add_tag
    steps:
    - checkout: self
      persistCredentials: true
    - task: PowerShell@2
      displayName: 'Add Build Tag'
      condition: succeeded()  # Only when all previous tasks have succeeded
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        targetType: inline
        script: |
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Authorization", "Bearer $env:SYSTEM_ACCESSTOKEN")
          $headers.Add("Content-Type", "application/json")
          $uri = "$(devOpsProjectUrl)/_apis/build/builds/$(Build.BuildId)/tags/$(gitTag)?api-version=6.0"
          Invoke-RestMethod -Uri $uri -Headers $headers -Method PUT
    - script: |
        git config --global user.email "AzureTeamVWGS@Volkswagen-Groupservices.dev.azure.com"
        git config --global user.name "Azure Team VWGS Build Bot"
        git tag -a $(gitTag) -m "Release $(gitTag)"
        git push --tags origin HEAD:$(Build.SourceBranch)
        