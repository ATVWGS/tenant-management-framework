trigger:
  branches:
    include:
      - main
      - prepare-release/*
  paths:
    include:
      - TMF

variables:
  moduleName: 'TMF'

name: Test TMF $(SourceBranchName) $(Date:yyyy-MM-dd).$(Rev:r)

pool:
  vmImage: "windows-latest"

stages:
- stage: run_tests
  jobs:
  - job: general_tests
    steps:
      - task: Cache@2
        inputs:
          key: powershell-modules
          path: C:\Program Files\WindowsPowerShell\Modules\
          cacheHitVar: MODULES_RESTORED
      - task: PowerShell@2
        displayName: Install dependencies
        inputs:
          targetType: inline
          script: |
            Install-Module -Name "Microsoft.Graph" -Force -Repository PSGallery
            Install-Module -Name PSFramework -Force -Repository PSGallery
            Install-Module -Name Pester -Force -SkipPublisherCheck -RequiredVersion "5.3.1"
        condition: ne(variables.MODULES_RESTORED, 'true')
      - task: PowerShell@2
        continueOnError: true
        inputs:         
          filePath: 'tests/test.ps1'
          arguments: '-OutPath "$(Pipeline.Workspace)/tests/results" -TestsToRun "General"'
          workingDirectory: 'tests/'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: '**/*.xml'
          searchFolder: '$(Pipeline.Workspace)/tests/results'
          failTaskOnFailedTests: true
  - job: module_specific_tests
    steps:
      - task: Cache@2
        inputs:
          key: powershell-modules
          path: C:\Program Files\WindowsPowerShell\Modules\
          cacheHitVar: MODULES_RESTORED
      - task: PowerShell@2
        displayName: Install dependencies
        inputs:
          targetType: inline
          script: |
            Install-Module -Name "Microsoft.Graph" -Force -Repository PSGallery
            Install-Module -Name PSFramework -Force -Repository PSGallery
            Install-Module -Name Pester -Force -SkipPublisherCheck -RequiredVersion "5.3.1"
        condition: ne(variables.MODULES_RESTORED, 'true')
      - task: PowerShell@2
        continueOnError: true
        inputs:         
          filePath: 'tests/test.ps1'
          arguments: '-OutPath "$(Pipeline.Workspace)/tests/results" -TenantId $(testsTenantId) -TenantClientSecret $(testsClientSecret) -TenantClientId $(testsClientId) -TestsToRun "Module"'
          workingDirectory: 'tests/'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'NUnit'
          testResultsFiles: '**/*.xml'
          searchFolder: '$(Pipeline.Workspace)/tests/results'
          failTaskOnFailedTests: true